# Workflow to build and test wheels
name: Cuda Wheel builder

# on:
#   release:
#     types: [published]
#   # Manual run
#   workflow_dispatch:

on:
  pull_request:
    branches: [ "main" ]


concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Build the wheels for Linux, and macOS for Python 3.9 and newer
  build_cuda_wheels:
    name: Build wheel for cp${{ matrix.python }}-${{ matrix.package_name }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        platform_id: [manylinux_x86_64]
        manylinux_image: [manylinux2014]
        python: [39, 310, 311, 312]
        package: [ { test: "abc" } ]
        include:
          - package_name: bipp-cuda12x
            cuda_arch: "60;61;70;75;80;86;89;90"
            cuda_url: https://developer.download.nvidia.com/compute/cuda/12.0.0/local_installers/cuda_12.0.0_525.60.13_linux.run
          - package_name: bipp-cuda11x
            cuda_url: https://developer.download.nvidia.com/compute/cuda/11.2.1/local_installers/cuda_11.2.1_460.32.03_linux.run
            cuda_arch: "60;61;70;75;80;86"

    steps:
      - name: Checkout bipp
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build and test wheels
        env:
          CIBW_PRERELEASE_PYTHONS: ${{ matrix.prerelease }}
          CIBW_ENVIRONMENT: >
           BIPP_PACKAGE_NAME="${{ matrix.package_name }}"
           BIPP_GPU=CUDA
           CUDACXX=/usr/local/cuda/bin/nvcc
           CUDAARCHS="${{ matrix.cuda_arch }}"
           BIPP_CMAKE_ARGS="-DBLAS_LIBRARIES=/usr/lib64/libopenblaso.so.0 -DCMAKE_PREFIX_PATH=/root/cufinufft"
           LD_LIBRARY_PATH="/root/cufinufft/lib:$LD_LIBRARY_PATH"
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_ARCHS: all
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_REPAIR_WHEEL_COMMAND: auditwheel repair -w {dest_dir} {wheel} --exclude libcuda.so.1 $(.github/build_tools/repair_exclude_cuda.sh)
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BEFORE_ALL_LINUX: >
            cd ${HOME} &&
            yum install -y openblas-openmp fftw-devel wget &&
            wget --quiet -O cuda_install.run ${{ matrix.cuda_url }} &&
            chmod +x cuda_install.run &&
            ./cuda_install.run --silent --override --toolkit &&
            bash {project}/.github/build_tools/install_finufft.sh &&
            bash {project}/.github/build_tools/install_cufinufft.sh

        run: |
         bash .github/build_tools/build_wheels.sh

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cibw-${{ matrix.package_name }}-wheels-cp${{ matrix.python }}-${{ matrix.platform_id }}
          path: wheelhouse/*.whl

 # Upload cuda 12x wheels
  pypi-publish-12x:
    name: Upload release to PyPI
    runs-on: ubuntu-latest
    environment:
      name: testpypi
    needs: [build_cuda_wheels]
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-bipp-cuda12x*
          path: dist
          merge-multiple: true

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          print-hash: true

 # Upload cuda 11x wheels
  pypi-publish-11x:
    name: Upload release to PyPI
    runs-on: ubuntu-latest
    environment:
      name: testpypi
    needs: [build_cuda_wheels]
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-bipp-cuda11x*
          path: dist
          merge-multiple: true

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          print-hash: true

