# Workflow to build and test wheels
name: Cuda 12x Wheel builder

# on:
#   release:
#     types: [published]
#   # Manual run
#   workflow_dispatch:

on:
  pull_request:
    branches: [ "main" ]


concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Build the wheels for Linux, and macOS for Python 3.9 and newer
  build_cuda_12_wheels:
    name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        platform_id: [manylinux_x86_64]
        manylinux_image: [manylinux2014]
        python: [39, 310, 311, 312]
        include:
          - cuda_arch: "80;89;90"
            cuda_url: https://developer.download.nvidia.com/compute/cuda/12.0.0/local_installers/cuda_12.0.0_525.60.13_linux.run
            package_name: bipp-cuda12x
            wheel_repair: auditwheel repair -w {dest_dir} {wheel} --exclude libcuda.so.1 --exclude libcudart.so.12.2.53 --exclude libcudart.so.12 --exclude libcupti.so.12 --exclude libcupti.so.2023.2.2 --exclude libnppidei.so.12 --exclude libcusolver.so.11.5.2.141 --exclude libcurand.so.10 --exclude libnvblas.so.12 --exclude libnvrtc.so.12 --exclude libcufile.so.1.7.2 --exclude libcusparse.so.12 --exclude libnppim.so.12.1.1.14 --exclude libnppist.so.12 --exclude libnppitc.so.12.1.1.14 --exclude libnppif.so.12 --exclude libcublasLt.so.12 --exclude libnppisu.so.12.1.1.14 --exclude libnppitc.so.12 --exclude libnppial.so.12.1.1.14 --exclude libcublas.so.12 --exclude libcublas.so.12.2.1.16 --exclude libcufftw.so.11.0.8.103 --exclude libnvjpeg.so.12.2.2.4 --exclude libcusolver.so.11 --exclude libnvrtc-builtins.so.12.2 --exclude libnppig.so.12.1.1.14 --exclude libnvJitLink.so.12 --exclude libcufftw.so.11 --exclude libnpps.so.12 --exclude libnppc.so.12 --exclude libnppicc.so.12.1.1.14 --exclude libnppidei.so.12.1.1.14 --exclude libnppial.so.12 --exclude libnppicc.so.12 --exclude libcurand.so.10.3.3.141 --exclude libnppisu.so.12 --exclude libnvJitLink.so.12.2.140 --exclude libcufft.so.11.0.8.103 --exclude libnvrtc-builtins.so.12.2.140 --exclude libnvrtc.so.12.2.140 --exclude libnpps.so.12.1.1.14 --exclude libcufft.so.11 --exclude libnppif.so.12.1.1.14 --exclude libnvjpeg.so.12 --exclude libcublasLt.so.12.2.1.16 --exclude libcufile_rdma.so.1 --exclude libnppc.so.12.1.1.14 --exclude libnppim.so.12 --exclude libcusolverMg.so.11.5.2.141 --exclude libnppist.so.12.1.1.14 --exclude libcusolverMg.so.11 --exclude libnppig.so.12 --exclude libcufile.so.0 --exclude libnvToolsExt.so.1 --exclude libcusparse.so.12.1.1.53 --exclude libnvblas.so.12.2.1.16 --exclude libcufile_rdma.so.1.7.2 --exclude libnvToolsExt.so.1.0.0

    steps:
      - name: Checkout bipp
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11" # update once build dependencies are available

      - name: Build and test wheels
        env:
          CIBW_PRERELEASE_PYTHONS: ${{ matrix.prerelease }}
          CIBW_ENVIRONMENT: >
           BIPP_PACKAGE_NAME="${{ matrix.package_name }}"
           BIPP_GPU=CUDA
           CUDACXX=/usr/local/cuda/bin/nvcc
           CUDAARCHS="${{ matrix.cuda_arch }}"
           BIPP_CMAKE_ARGS="-DBLAS_LIBRARIES=/usr/lib64/libopenblaso.so.0 -DCMAKE_PREFIX_PATH=/root/cufinufft"
           LD_LIBRARY_PATH="/root/cufinufft/lib:$LD_LIBRARY_PATH"
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_ARCHS: all
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}
          # CIBW_REPAIR_WHEEL_COMMAND: ${{ matrix.wheel_repair }}
          CIBW_REPAIR_WHEEL_COMMAND: auditwheel repair -w {dest_dir} {wheel} --exclude libcuda.so.1 $(.github/build_tools/repair_exclude_cuda.sh)
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BEFORE_ALL_LINUX: >
            cd ${HOME} &&
            yum install -y openblas-openmp fftw-devel wget &&
            wget --quiet -O cuda_install.run ${{ matrix.cuda_url }} &&
            chmod +x cuda_install.run &&
            ./cuda_install.run --silent --override --toolkit &&
            bash {project}/.github/build_tools/install_finufft.sh &&
            bash {project}/.github/build_tools/install_cufinufft.sh

        run: |
         bash .github/build_tools/build_wheels.sh

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cibw-cuda-wheels-cp${{ matrix.python }}-${{ matrix.platform_id }}
          path: wheelhouse/*.whl

 # Upload wheels
  pypi-publish:
    name: Upload release to PyPI
    runs-on: ubuntu-latest
    environment:
      name: testpypi
    needs: [build_cuda_12_wheels]
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-cuda-*
          path: dist
          merge-multiple: true

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          print-hash: true

