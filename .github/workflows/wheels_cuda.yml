# Workflow to build and test wheels
name: Cuda 12x Wheel builder

# on:
#   release:
#     types: [published]
#   # Manual run
#   workflow_dispatch:

on:
  pull_request:
    branches: [ "main" ]


concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Build the wheels for Linux, and macOS for Python 3.9 and newer
  build_cuda_12_wheels:
    name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        platform_id: [manylinux_x86_64]
        manylinux_image: [manylinux2014]
        python: [39, 310]
        include:
          - cuda_arch: "70;80"
            cuda_url: https://developer.download.nvidia.com/compute/cuda/12.0.0/local_installers/cuda_12.0.0_525.60.13_linux.run
            package_name: bipp-cuda12x

        #   - python: 310
        #     cuda_url: https://developer.download.nvidia.com/compute/cuda/12.0.0/local_installers/cuda_12.0.0_525.60.13_linux.run

    steps:
      - name: Checkout bipp
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11" # update once build dependencies are available

      - name: Build and test wheels
        env:
          CIBW_PRERELEASE_PYTHONS: ${{ matrix.prerelease }}
          CIBW_ENVIRONMENT: >
           BIPP_PACKAGE_NAME="${{ matrix.package_name }}" &&
           BIPP_GPU=CUDA &&
           CUDACXX=/usr/local/cuda/bin/nvcc &&
           CUDAARCHS="${{ matrix.cuda_arch }}" &&
           BIPP_CMAKE_ARGS="-DBLAS_LIBRARIES=/usr/lib64/libopenblaso.so.0 -DCMAKE_PREFIX_PATH=/root/cufinufft" &&
           LD_LIBRARY_PATH="/root/cufinufft/lib:$LD_LIBRARY_PATH"
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_ARCHS: all
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}
          # CIBW_TEST_REQUIRES: pybind11 scikit-build cmake
          CIBW_TEST_COMMAND: python -c "import bipp"
          CIBW_BUILD_VERBOSITY: 1
          # casacore has no wheel for 3.12
          CIBW_TEST_SKIP: "*cp312*"
          CIBW_BEFORE_ALL_LINUX: >
            yum install -y openblas-openmp fftw-devel wget &&
            cd ${HOME} &&
            wget --quiet https://github.com/flatironinstitute/finufft/archive/refs/tags/v2.2.0.tar.gz &&
            tar -xzvf v2.2.0.tar.gz &&
            cd finufft-2.2.0 && mkdir build && cd build &&
            cmake .. -DCMAKE_BUILD_TYPE=RELEASE -DFINUFFT_ARCH_FLAGS="" &&
            make install -j &&
            cd ${HOME} &&
            wget --quiet -O cuda_install.run ${{ matrix.cuda_url }} &&
            chmod +x cuda_install.run &&
            ./cuda_install.run --silent --override --toolkit &&
            git clone https://github.com/AdhocMan/cufinufft.git &&
            cd ${HOME}/cufinufft && git checkout t3_d3 &&
            export CFLAGS="-fPIC -O3 -funroll-loops" &&
            export CUDACXX=/usr/local/cuda/bin/nvcc &&
            export NVCC=$CUDACXX &&
            export NVARCH="-gencode=arch=compute_70,code=sm_70" &&
            make lib -j


        run: bash .github/build_tools/build_wheels.sh

 #      - name: Store artifacts
 #        uses: actions/upload-artifact@v4
 #        with:
 #          name: cibw-wheels-cp${{ matrix.python }}-${{ matrix.platform_id }}
 #          path: wheelhouse/*.whl

 #  # Build the source distribution under Linux
 #  build_sdist:
 #    name: Source distribution
 #    runs-on: ubuntu-latest

 #    steps:
 #      - name: Checkout bipp
 #        uses: actions/checkout@v4

 #      - name: Setup Python
 #        uses: actions/setup-python@v5
 #        with:
 #          python-version: "3.9"

 #      - name: Build source distribution
 #        run: |
 #          python -m pip install twine build
 #          python -m build --sdist

 #      - name: Store artifacts
 #        uses: actions/upload-artifact@v4
 #        with:
 #          name: cibw-sdist
 #          path: dist/*.tar.gz

 # # Upload wheels
 #  pypi-publish:
 #    name: Upload release to PyPI
 #    runs-on: ubuntu-latest
 #    environment:
 #      name: testpypi
 #    needs: [build_cuda_12_wheels, build_sdist]
 #    permissions:
 #      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

 #    steps:
 #      - name: Download artifacts
 #        uses: actions/download-artifact@v4
 #        with:
 #          pattern: cibw-*
 #          path: dist
 #          merge-multiple: true

 #      - name: Publish package distributions to PyPI
 #        uses: pypa/gh-action-pypi-publish@release/v1
 #        with:
 #          repository-url: https://test.pypi.org/legacy/
 #          print-hash: true

